<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>留言墙</title>
    <url>/2020/07/11/%E7%95%99%E8%A8%80%E5%A2%99/</url>
    <content><![CDATA[<p>这篇博客的评论区就作为本站的留言墙，欢迎大家留言~</p>
]]></content>
  </entry>
  <entry>
    <title>江舟</title>
    <url>/2020/07/07/jiangzhou/</url>
    <content><![CDATA[<p>今天开通了自己的个人博客，好像也叫个人网站。其实CSDN之类的就已经具备了同样的功能了，而且它有的我这里很多都没有。但是总感觉这样子似乎就有了属于自己的小天地，就很舒服。</p>
<a id="more"></a>
<p>这个是依托于github的，并不是自己搭建前台后台数据库这种从零起步的方式。虽然好像不那么牛批，但现在一是能力有限，二是还没有什么特别的需求，暂时也还不用搞得过于复杂。</p>
<p>就我个人而言，能写字，能贴图，能输公式，能敲代码也就可以了，所以接下来我就把这几种都试验一下。</p>
<ul>
<li>图片</li>
</ul>
<p><img src="/2020/07/07/jiangzhou/1007550.jpg" alt></p>
<p>而且之前特地找了hexo博客图片该怎么<a href="https://www.cnblogs.com/hugochen1024/p/12570656.html" target="_blank" rel="noopener">添加</a>，也就是通过设置然后在hexo生成md文件时自动生成一个文件夹；但是之前typora就已经设置过添加图片时自动添加文件夹，这么一来似乎也没必要通过hexo的yml文件设置了。</p>
<ul>
<li>公式</li>
</ul>
<ol>
<li><p>行内公式：$f=x^2$</p>
</li>
<li><p>单独成行：</p>
</li>
</ol>
<script type="math/tex; mode=display">
f=x^2+y^2</script><p>居然还自动编号了，感动。可以引用吗？好像没法交叉引用自动更新（想想也可以理解），只能手动引用公式$(1)$。</p>
<ul>
<li>代码</li>
</ul>
<ol>
<li><p>行内代码片：<code>a=ones(m,n)</code>（我发现我完全就是在写markdown，如果兼容就最好了）</p>
</li>
<li><p>代码块：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">system.out.println(<span class="string">"今天开通了个人博客！"</span>)</span><br></pre></td></tr></table></figure>
<p>好了，实验结束！</p>
<p>其实这篇博客本来是想把我的那篇《江舟》贴上来的，倒不是说那篇写得多好，只是做实验习惯性地用那篇，包括我的个人公众号也是用的那篇作为实验文章。所以博文的tag以及题目都和实际内容有些不对，此处解释一下。</p>
<p>好像没什么要说的了，以后除了写一些专业上的总结，可能还会写点比较随性的其他东西（是不是叫“随笔”？）。可能会有读后感之类的。其实我个人觉得读后感这种东西比较麻烦，因为你要写的话一般就得回顾情节，记不住就得回去翻，这个过程很麻烦。但是我觉得一篇比较好的读后感肯定是要做到这样子的，那些up做视频有的真的堪称”一帧一帧“看原片。所以：1、回顾也是有必要的，看完就忘莫得感想似乎也就没有很大意义；2、好东西肯定是要花时间的。</p>
<p>差不多就这样吧，最近有点颓，感觉啥事儿都没干，论文看得既慢又不得劲儿，无功优化的文章似乎有点问题，还不如直接线性化之后用求解器来得快，还得继续研究。今天还被七年级的表弟（不知道是不是这么称呼）的数学题问住了，不过后面和韬神讨论认为是题目印刷错了（因为直线和圆无交点，强解是无实数解的）。顺便也贴出来，大家有兴趣可以尝试一下。</p>
<p><img src="/2020/07/07/jiangzhou/image-20200707205216990.png" alt></p>
]]></content>
      <categories>
        <category>文字</category>
      </categories>
      <tags>
        <tag>文字</tag>
      </tags>
  </entry>
  <entry>
    <title>绝对值约束的线性化方法</title>
    <url>/2020/07/15/%E4%BC%98%E5%8C%96/%E7%BB%9D%E5%AF%B9%E5%80%BC%E7%BA%A6%E6%9D%9F%E7%BA%BF%E6%80%A7%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Tricks~</p>
<a id="more"></a>
<p>来源于——</p>
<blockquote>
<p>孙田, 邹鹏, 杨知方, 等. 动态无功优化的多阶段求解方法[J]. 电网技术, 2016, 40(06): 1804–1810.</p>
</blockquote>
<p>绝对值约束线性化的关键就在于把绝对值项线性化地表示出来，假设有绝对值项 <script type="math/tex">y = \left| {m - n} \right|</script>，则可用如下式子线性化：</p>
<script type="math/tex; mode=display">
\left\{ \matrix{
  0 \le y - (m - n) \le M \cdot {\delta _1} \hfill \cr 
  0 \le y - (n - m) \le M \cdot {\delta _2} \hfill \cr 
  {\delta _1} + {\delta _2} = 1 \hfill \cr}  \right.</script><p>其中：$M$是一个较大的正数，${\delta _2}\ {\delta _2}$均为0-1变量。</p>
<p>解释如下：</p>
<p>根据 $\delta$ 取值的不同，有两种可能的情况——</p>
<ol>
<li>$\delta _1=0, \delta _2=1$</li>
<li>$\delta _1=1, \delta _2=0$</li>
</ol>
<p>假设 <script type="math/tex">m > n</script>，理论上 <script type="math/tex">y = m - n</script>，正确的 $\delta$ 取值应该是第1种情况，接下来我们要判断的就是在式$(1)$的约束下，是否能保证情形2不存在。</p>
<p>将情形2的取值代入，得到<script type="math/tex">\left\{ \matrix{
  y = n - m < 0 \hfill \cr 
  y \ge m - n > 0 \hfill \cr}  \right.</script>，显然矛盾，所以情形2不可能成立。</p>
<p>总结：绝对值约束实际上就是取 $m-n$ 和 $n-m$ 二者中的较大者。<script type="math/tex">\left\{ \matrix{
  0 \le y - (m - n) \hfill \cr 
  0 \le y - (n - m) \hfill \cr}  \right.</script>使得$y$ 大于等于二者中的较大值，再通过0-1变量和大M使得对应的不等约束最终取等。</p>
<p>0-1变量对应着不同的情形，但不合理的情形实际上都在约束的相互作用之间成为不可行解。和最大值约束一样，绝对值约束同样是一种“选择性”的约束：如果a&gt;b，那么如何；如果a&lt;b，又如何。0-1变量就是给出各种情形，约束间的相互作用消去不合理的情形，大M则是用于在不同情形下松弛某些约束。</p>
<p>每次写这种东西都觉得自己的表达能力很欠缺~</p>
]]></content>
      <tags>
        <tag>优化</tag>
        <tag>线性化</tag>
      </tags>
  </entry>
  <entry>
    <title>python绘图——matplotlib</title>
    <url>/2020/07/14/AI/MatplotLib/</url>
    <content><![CDATA[<p>python绘图——线型图、散点图、直方图、饼图。</p>
<a id="more"></a>
<h1 id="plot、scatter"><a href="#plot、scatter" class="headerlink" title="plot、scatter"></a>plot、scatter</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>我用matlab期间几乎只用到了这两种图：</p>
<ul>
<li>plot：线型图</li>
<li>scatter：散点图</li>
</ul>
<p>使用前：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x, y)</span><br><span class="line">plt.scatter(x, y)</span><br></pre></td></tr></table></figure>
<p>除了带了个前缀，和matlab里绘图也没啥差别。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">0</span></span><br><span class="line">x = torch.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">y = a*x.pow(<span class="number">2</span>)+b+<span class="number">0.1</span>*torch.rand(x.size())</span><br><span class="line">plt.scatter(x, y)  <span class="comment"># 待拟合数据</span></span><br><span class="line">plt.plot(x, y)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_1.png" width="500"></p>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_2.png" width="500"></p>
<h2 id="丰富图像"><a href="#丰富图像" class="headerlink" title="丰富图像"></a>丰富图像</h2><h3 id="线型图"><a href="#线型图" class="headerlink" title="线型图"></a>线型图</h3><p><code>plt.plot(x, y, &quot;r--o&quot;)</code></p>
<h4 id="线条颜色"><a href="#线条颜色" class="headerlink" title="线条颜色"></a>线条颜色</h4><ol>
<li><p>“b”：指定绘制的线条颜色为蓝色。</p>
</li>
<li><p>“g”：指定绘制的线条颜色为绿色。</p>
</li>
<li><p>“r”：指定绘制的线条颜色为红色。</p>
</li>
<li><p>“c”：指定绘制的线条颜色为蓝绿色。</p>
</li>
<li><p>“m”：指定绘制的线条颜色为洋红色。</p>
</li>
<li><p>“y”：指定绘制的线条颜色为黄色。</p>
</li>
<li><p>“k”：指定绘制的线条颜色为黑色。</p>
</li>
<li><p>“w”：指定绘制的线条颜色为白色。</p>
</li>
</ol>
<h4 id="参数点形状"><a href="#参数点形状" class="headerlink" title="参数点形状"></a>参数点形状</h4><ol>
<li><p><code>o</code>：指定标记实际点使用的形状为圆形。</p>
</li>
<li><p><code>*</code>：指定标记实际点使用“*”符号。</p>
</li>
<li><p><code>+</code>：指定标记实际点使用“+”符号。</p>
</li>
<li><p><code>x</code>：指定标记实际点使用“x”符号。</p>
</li>
</ol>
<h4 id="线条形状"><a href="#线条形状" class="headerlink" title="线条形状"></a>线条形状</h4><ol>
<li><code>-</code>：指定线条形状为实线。</li>
<li><code>--</code>：指定线条形状为虚线。</li>
<li><code>-.</code>：指定线条形状为点实线。</li>
<li><code>:</code>：指定线条形状为点线。 </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">30</span>)</span><br><span class="line">y = torch.randn(<span class="number">30</span>)</span><br><span class="line">plt.plot(x, <span class="string">'r--*'</span>)</span><br><span class="line">plt.plot(y, <span class="string">'b:o'</span>)  <span class="comment"># python默认画在同一张图中</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_3.png" width="500"></p>
<p>这个输出的图片质量确实比matlab要好。</p>
<h4 id="标签和图例"><a href="#标签和图例" class="headerlink" title="标签和图例"></a>标签和图例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">30</span>)</span><br><span class="line">y = torch.randn(<span class="number">30</span>)</span><br><span class="line">p1, = plt.plot(x, <span class="string">'r--*'</span>)</span><br><span class="line">p2, = plt.plot(y, <span class="string">'b:o'</span>)  <span class="comment"># 为了使用图例必须给每个绘图加上名字（matlab里是不是叫句柄？），而且名字后面得加一个英文逗号","</span></span><br><span class="line">plt.title(<span class="string">"test"</span>)  <span class="comment"># 图名</span></span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)  <span class="comment"># </span></span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)  <span class="comment"># x、y轴标签</span></span><br><span class="line">plt.legend([p1, p2], [<span class="string">"x"</span>, <span class="string">"y"</span>])  <span class="comment"># 图例</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_4.png" width="500"></p>
<h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()  <span class="comment"># 先用这个定义一个实例（就像matlab里的figure）</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)  <span class="comment"># 第1张子图</span></span><br><span class="line">p1, = plt.plot(x, <span class="string">'r--*'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)  <span class="comment"># 第2张子图</span></span><br><span class="line">p2, = plt.plot(y, <span class="string">'b:o'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_5.png" width="500"></p>
<p>也可以加上分别加上标签等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()  <span class="comment"># 先用这个定义一个实例（就像matlab里的figure）</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)  <span class="comment"># 第1张子图</span></span><br><span class="line">p1, = plt.plot(x, <span class="string">'r--*'</span>)</span><br><span class="line">plt.title(<span class="string">"subplot1"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)  <span class="comment"># 位置放前放后都可以</span></span><br><span class="line">plt.subplot(<span class="number">122</span>)  <span class="comment"># 第2张子图</span></span><br><span class="line">p2, = plt.plot(y, <span class="string">'b:o'</span>)</span><br><span class="line">plt.title(<span class="string">"subplot2"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)  <span class="comment"># 位置放前放后都可以</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_6.png" width="500"></p>
<p>不过好像有点错位~</p>
<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p>和线形图有几点区别：</p>
<ul>
<li>前面线形图可以只输入纵轴数据，横轴默认是从1~N，但scatter不行，必须x和y一起输入；</li>
<li>丰富图像也不能在后面直接用<code>“xxx”</code>，必须挨个儿指定，具体见下文。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(x, y, c=<span class="string">'r'</span>, marker=<span class="string">'o'</span>, label=<span class="string">"(x,y)"</span>) </span><br><span class="line">plt.title(<span class="string">"scatter"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)</span><br><span class="line">plt.legend(loc=<span class="number">2</span>)  <span class="comment"># 指定图例的位置</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_7.png" width="500"></p>
<ul>
<li><code>c</code>——点的颜色</li>
<li><code>marker</code>——点的形状</li>
<li><code>label</code>——图例，<strong>label这种直接写在绘图语句里面的用法也可以用于plot</strong></li>
<li><code>plt.legend(loc=2)</code>——设定图例的位置，没有这条语句，scatter里面设定的label不会生效！！<ul>
<li>“loc=0”：图例使用最好的位置。</li>
<li>“loc=1”：强制图例使用图中右上角的位置。</li>
<li>“loc=2”：强制图例使用图中左上角的位置。</li>
<li>“loc=3”：强制图例使用图中左下角的位置。</li>
<li>“loc=4”：强制图例使用图中右上角的位置。  </li>
</ul>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>两种绘图指令有相同之处又有不同之处，而且达到同一种效果可能有多种方式。但是这不是我们工作的重点，只要有一种自己惯用的方式，能满足基本需求即可。有特殊需求临时查即可。</p>
<h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.hist(x, bins=<span class="number">30</span>, color=<span class="string">"g"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>bins=30</code>，指定条纹数，默认是10</li>
<li><code>color</code>，指定条纹颜色</li>
</ul>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_8.png" width="500"></p>
<h1 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">labels = [<span class="string">"Dogs"</span>, <span class="string">"Cats"</span>, <span class="string">"Birds"</span>]</span><br><span class="line">sizes = [<span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>]</span><br><span class="line">plt.pie(sizes, explode=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), labels=labels, autopct=<span class="string">'%1.1f%%'</span>, startangle=<span class="number">90</span>)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/14/AI/MatplotLib/Figure_9.png" width="500"></p>
<p>说明：</p>
<ul>
<li><code>sizes= [15, 50, 35]</code>的三个数字确定了每部分数据系列在整个圆形中的占比；</li>
<li><code>explode</code>定义每部分数据系列之间的间隔，如果设置两个0和一个0.1，就能突出第3部分； </li>
<li><code>autopct</code>是将 sizes中的数据以所定义的浮点精度进行显示；</li>
<li><code>startangle</code>是绘制第1块饼图时该饼图与X轴正方向的夹角度数，这里设置为90，默认为0；</li>
<li><code>plt.axis(&#39;equal&#39;)</code>是必不可少的，用于使X轴和Y轴的刻度保持一致，只有这样，最后得到饼图才是圆形的。  </li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>绘图只是程序最终结果的形象展示，除非是用在论文报告里，一般的图只要能起到展示作用即可，不用多么精美绝伦，所以只要掌握一种自己常用的绘图方式即可；</li>
<li>这种东西就像字典一样，不用时刻记在心里，等到需要了，临时查也无妨，用得多了，自然也就记住了。</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch入门——Tensor</title>
    <url>/2020/07/14/AI/PyTorch%E5%85%A5%E9%97%A8_Tensor/</url>
    <content><![CDATA[<p>tensor和numpy差不多。</p>
<a id="more"></a>
<h1 id="pytorch的安装"><a href="#pytorch的安装" class="headerlink" title="pytorch的安装"></a>pytorch的安装</h1><p>去官网，可以直接生成相应的安装指令。</p>
<p>使用之前：<code>import torch</code></p>
<h1 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h1><p>就和numpy差不多。</p>
<h2 id="Tensor的数据类型"><a href="#Tensor的数据类型" class="headerlink" title="Tensor的数据类型"></a>Tensor的数据类型</h2><ul>
<li>torch.FloatTensor：用于生成数据类型为浮点型的Tensor， 传递给torch.FloatTensor的参数可以是一个列表， 也可以是维度值；</li>
<li>torch.IntTensor：类型为整型，其他同上。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 定义数据</span></span><br><span class="line">a=torch.FloatTensor(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b=torch.FloatTensor([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">c=torch.IntTensor(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">d=torch.IntTensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">5</span>,<span class="number">6</span>]]) <span class="comment"># 外面记得加中括号！！</span></span><br><span class="line">--</span><br><span class="line">tensor([[<span class="number">1.0653e-38</span>, <span class="number">1.0194e-38</span>, <span class="number">4.6838e-39</span>],</span><br><span class="line">        [<span class="number">8.4489e-39</span>, <span class="number">9.6429e-39</span>, <span class="number">8.4490e-39</span>]]) </span><br><span class="line"> tensor([<span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>, <span class="number">5.</span>]) </span><br><span class="line"> tensor([[<span class="number">2053731104</span>,  <span class="number">706751589</span>, <span class="number">1852383276</span>],</span><br><span class="line">        [<span class="number">1679834996</span>, <span class="number">1701869940</span>, <span class="number">1852383276</span>]], dtype=torch.int32) </span><br><span class="line"> tensor([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]], dtype=torch.int32)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>torch.rand：生成指定维度、浮点型、（0,1）区间均匀分布的随机Tensor</p>
</li>
<li><p>torch.randn：均值为0，方差为1的正态分布，其余同上</p>
</li>
<li>torch.range/arange：浮点型，用法——起始值、结束值、步长（默认步长为1）</li>
<li>torch.zeros：浮点型、维数指定、元素值全为0</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e=torch.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">h=torch.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># f=torch.range(1,5) range已经不推荐使用了，改用arange，用法一样</span></span><br><span class="line">f=torch.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line">g=torch.zeros(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">i=torch.zeros(<span class="number">5</span>)</span><br><span class="line">print(e,<span class="string">'\n'</span>,h,<span class="string">'\n'</span>,f,<span class="string">'\n'</span>,g,<span class="string">'\n'</span>,i)</span><br><span class="line">--</span><br><span class="line">tensor([[<span class="number">0.3318</span>, <span class="number">0.9726</span>, <span class="number">0.3340</span>],</span><br><span class="line">        [<span class="number">0.6438</span>, <span class="number">0.9575</span>, <span class="number">0.0098</span>]]) </span><br><span class="line"> tensor([[ <span class="number">1.4218</span>,  <span class="number">1.5817</span>, <span class="number">-0.5466</span>],</span><br><span class="line">        [ <span class="number">0.8966</span>,  <span class="number">1.1906</span>,  <span class="number">0.3872</span>]]) </span><br><span class="line"> tensor([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>]) </span><br><span class="line"> tensor([[<span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>]]) </span><br><span class="line"> tensor([<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>])</span><br></pre></td></tr></table></figure>
<h2 id="Tensor的运算"><a href="#Tensor的运算" class="headerlink" title="Tensor的运算"></a>Tensor的运算</h2><p>也和numpy几乎一样。</p>
<ul>
<li>torch.abs：输入参数必须是一个Tensor数据类型的变量 ，返回绝对值</li>
<li>torch.add：输入可以是Tensor和Tensor，也可以是Tensor和标量</li>
<li>torch.clamp：输入参数包括待裁剪的Tensor数据类型的变量、裁剪的上边界和裁剪的下边界；如果元素的值小于裁剪的下边界的值，该元素就被重写成裁剪的下边界的值；同理，如果元素的值大于裁剪的上边界的值，该元素就被重写成裁剪的上边界的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 官方推荐赋值等运算符前后加上空格，行内注释，注释符前面空两格，后面空一格再写注释内容</span></span><br><span class="line">print(a)</span><br><span class="line">print(a.clamp(<span class="number">-0.5</span>))</span><br><span class="line">print(a.clamp(min=<span class="number">-0.5</span>))</span><br><span class="line">print(a.clamp(max=<span class="number">0.5</span>))  <span class="comment"># 是可以通过这种方式来单独指定一个的！感觉好方便</span></span><br><span class="line">print(a.clamp(<span class="number">-0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">---</span><br><span class="line">tensor([[ <span class="number">2.1158</span>, <span class="number">-1.0146</span>, <span class="number">-1.0519</span>],</span><br><span class="line">        [<span class="number">-2.0282</span>, <span class="number">-0.1845</span>,  <span class="number">0.7459</span>]])</span><br><span class="line">tensor([[ <span class="number">2.1158</span>, <span class="number">-0.5000</span>, <span class="number">-0.5000</span>],</span><br><span class="line">        [<span class="number">-0.5000</span>, <span class="number">-0.1845</span>,  <span class="number">0.7459</span>]])</span><br><span class="line">tensor([[ <span class="number">2.1158</span>, <span class="number">-0.5000</span>, <span class="number">-0.5000</span>],</span><br><span class="line">        [<span class="number">-0.5000</span>, <span class="number">-0.1845</span>,  <span class="number">0.7459</span>]])</span><br><span class="line">tensor([[ <span class="number">0.5000</span>, <span class="number">-1.0146</span>, <span class="number">-1.0519</span>],</span><br><span class="line">        [<span class="number">-2.0282</span>, <span class="number">-0.1845</span>,  <span class="number">0.5000</span>]])</span><br><span class="line">tensor([[ <span class="number">0.5000</span>, <span class="number">-0.5000</span>, <span class="number">-0.5000</span>],</span><br><span class="line">        [<span class="number">-0.5000</span>, <span class="number">-0.1845</span>,  <span class="number">0.5000</span>]])</span><br></pre></td></tr></table></figure>
<ul>
<li>torch.div：除法</li>
<li>torch.mul：乘法</li>
<li>torch.pow：求幂</li>
</ul>
<p>参与上面三个运算的两个主体可以都是Tensor类型变量，也可以Tensor和标量，和matlab的运算方法一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e=torch.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">f=torch.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">g=torch.rand(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">print(e,<span class="string">'\n'</span>,f,<span class="string">'\n'</span>,g)</span><br><span class="line">print(e.pow(f))</span><br><span class="line">print(e.pow(g))</span><br><span class="line"><span class="comment"># print(3.pow(2)) 直接这样子是会报错的</span></span><br><span class="line"><span class="comment"># print(torch.pow(3,2)) 这样也不行，必须有Tensor参与其中，如果只是常数运算，用普通的math包就可以了</span></span><br><span class="line">---</span><br><span class="line">tensor([[<span class="number">0.1342</span>, <span class="number">0.3514</span>, <span class="number">0.5444</span>],</span><br><span class="line">        [<span class="number">0.3213</span>, <span class="number">0.8190</span>, <span class="number">0.7505</span>]]) </span><br><span class="line"> tensor([[<span class="number">0.0562</span>, <span class="number">0.9394</span>, <span class="number">0.8471</span>],</span><br><span class="line">        [<span class="number">0.3373</span>, <span class="number">0.9015</span>, <span class="number">0.8062</span>]]) </span><br><span class="line"> tensor([[<span class="number">0.9882</span>, <span class="number">0.6073</span>, <span class="number">0.6899</span>]])</span><br><span class="line">tensor([[<span class="number">0.8933</span>, <span class="number">0.3743</span>, <span class="number">0.5975</span>],</span><br><span class="line">        [<span class="number">0.6819</span>, <span class="number">0.8353</span>, <span class="number">0.7934</span>]])</span><br><span class="line">tensor([[<span class="number">0.1374</span>, <span class="number">0.5299</span>, <span class="number">0.6574</span>],</span><br><span class="line">        [<span class="number">0.3256</span>, <span class="number">0.8858</span>, <span class="number">0.8204</span>]])</span><br></pre></td></tr></table></figure>
<ul>
<li>torch.mm：运用矩阵之间的乘法规则进行计算</li>
<li>torch.mv：运用矩阵与向量之间的乘法规则进行计算，被传入的参数中的第1个参数代表矩阵，第2个参数代表向量，顺序不能颠倒</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=torch.rand(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">b=torch.rand(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">d=torch.rand(<span class="number">3</span>)</span><br><span class="line">c=torch.mm(a,b)</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># print(a.mv(b)) 报错，两个都是矩阵，不满足矩阵和向量的要求</span></span><br><span class="line">print(a.mv(d))</span><br><span class="line">print(b,<span class="string">'\n'</span>,d)<span class="comment"># 注意二者区别——一个是矩阵，一个是向量（从中括号可以看出来）</span></span><br><span class="line">---</span><br><span class="line">tensor([[<span class="number">0.9265</span>]])</span><br><span class="line">tensor([<span class="number">0.1591</span>])</span><br><span class="line">tensor([[<span class="number">0.6617</span>],</span><br><span class="line">        [<span class="number">0.4398</span>],</span><br><span class="line">        [<span class="number">0.3797</span>]]) </span><br><span class="line"> tensor([<span class="number">0.1102</span>, <span class="number">0.0286</span>, <span class="number">0.2890</span>])</span><br></pre></td></tr></table></figure>
<p>这里矩阵和向量还是分得比较细的，不能像matlab那么随便了~</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch入门——数组维度及squeeze、unsqueeze</title>
    <url>/2020/07/14/AI/PyTorch%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84%E7%BB%B4%E5%BA%A6%E5%8F%8Asqueeze%E3%80%81unsqueeze/</url>
    <content><![CDATA[<p>初学PyTorch，觉得这里的数组维度系统比起matlab要更加复杂，自己的理解还是不够透彻，这个问题在接触到squeeze、unsqueeze两个函数是更加凸显出来。</p>
<a id="more"></a>
<p>今天忽然感觉理解精进了一些，执笔记录。</p>
<h1 id="数组、矩阵、向量"><a href="#数组、矩阵、向量" class="headerlink" title="数组、矩阵、向量"></a>数组、矩阵、向量</h1><p>这三个词的区别问题之前已经抛出来过，这里专门再提一下。</p>
<ul>
<li>向量：一维数组</li>
<li>矩阵：二维数组</li>
<li>数组：包括一维、二维数组、高维数组</li>
</ul>
<p>广义上来说，数组包括矩阵和向量，矩阵也包括向量。只不过因为我们省略了长度为1的维度，而提出了向量、矩阵两个说法。</p>
<p>在matlab里面向量和矩阵的差别基本可以忽略，高维数组由于需要分成n个二维数组来展示，所以可能不那么直观，更高维度的矩阵其实用得也比较少。</p>
<h1 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h1><p>Tensor的中文翻译叫”张量“。我认为造成理解上障碍的“罪魁祸首”就是PyTorch里面定义数组时没有分号<code>;</code>来表示纵向的扩展，我们虽然有时还是会说几行几列，但实际上根本不存在明确的“行列”概念，我觉得称之为“嵌套”更加合适。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.rand(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.size())</span><br><span class="line">------------------</span><br><span class="line">tensor([[[[<span class="number">0.4160</span>, <span class="number">0.7013</span>],</span><br><span class="line">          [<span class="number">0.3883</span>, <span class="number">0.6756</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.6303</span>, <span class="number">0.0144</span>],</span><br><span class="line">          [<span class="number">0.1027</span>, <span class="number">0.8542</span>]]]])</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p>看上面的例子，4维数组，如果是在matlab里面，会拆成n个二维数组（矩阵）展示出来。但这里是以嵌套的形式一次性输出的，起初我觉得这样有点乱，但是今天我恍然发现，输出的中括号的层次完美地表现了数组的层次！</p>
<p>PyTorch里面高维数组定义和matlab里面不同：</p>
<p>matlab中前两个数分别是行、列数，后面则是更高维度的维度长度，拿上面的<code>(1, 2, 2, 2)</code>举例子，应该是有<code>2*2</code>个<code>1*2</code>，即一行二列的矩阵；</p>
<p>PyTorch中的各个数字从左往右分别对应由外到内的层次。<code>(a,b,c,d)</code>表示最外层数组包含a个元素（元素本身也是数组，只有到最内层才是普通的数），a个元素各自又包含b个子数组，b个子数组各自又包含c个子数组，c个子数组每个都包含d个元素。</p>
<p>下面对照着括号来看：</p>
<ul>
<li>最外层的中括号：数组的象征，无论多少维的数组，最外面都有一层中括号，所以最外面的中括号本身并不包含任何维度信息。</li>
<li>第二层：在垂直方向上观察，只有一层，说明该维度长度为1（对应<code>(a,b,c,d)</code>中的a）；</li>
<li>第三层：在垂直方向上观察，有两层，说明该维度长度为2（对应<code>(a,b,c,d)</code>中的b）；</li>
<li>第四层：在垂直方向上观察，由于上一层是有两层的，所以pycharm的输出也非常贴心地分成了上下两块，我们只用看第一块即可，显然也是两层，说明该维度长度为2（对应<code>(a,b,c,d)</code>中的c）；</li>
<li>第五层：也是最内层，随便选中一个中括号，里面是横着排列的，用逗号分隔的2个数，说明该维度长度为2（对应<code>(a,b,c,d)</code>中的d）；</li>
</ul>
<p>上述过程完全没有考虑“行列”的概念，我认为这样在PyTorch中反而不容易迷糊。下面再举一个例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.rand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.size())</span><br><span class="line">-----------------------</span><br><span class="line">tensor([[[[<span class="number">0.3689</span>, <span class="number">0.0515</span>, <span class="number">0.4698</span>, <span class="number">0.8608</span>, <span class="number">0.2939</span>],</span><br><span class="line">          [<span class="number">0.6328</span>, <span class="number">0.7154</span>, <span class="number">0.4514</span>, <span class="number">0.8239</span>, <span class="number">0.3587</span>],</span><br><span class="line">          [<span class="number">0.5970</span>, <span class="number">0.1604</span>, <span class="number">0.0033</span>, <span class="number">0.8885</span>, <span class="number">0.3629</span>],</span><br><span class="line">          [<span class="number">0.2186</span>, <span class="number">0.9431</span>, <span class="number">0.2264</span>, <span class="number">0.3357</span>, <span class="number">0.3118</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.8402</span>, <span class="number">0.7487</span>, <span class="number">0.8137</span>, <span class="number">0.0692</span>, <span class="number">0.9861</span>],</span><br><span class="line">          [<span class="number">0.1275</span>, <span class="number">0.5480</span>, <span class="number">0.3803</span>, <span class="number">0.3801</span>, <span class="number">0.6754</span>],</span><br><span class="line">          [<span class="number">0.7389</span>, <span class="number">0.3532</span>, <span class="number">0.5560</span>, <span class="number">0.4056</span>, <span class="number">0.2368</span>],</span><br><span class="line">          [<span class="number">0.1113</span>, <span class="number">0.3072</span>, <span class="number">0.6570</span>, <span class="number">0.1285</span>, <span class="number">0.6331</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.0912</span>, <span class="number">0.3514</span>, <span class="number">0.2731</span>, <span class="number">0.9596</span>, <span class="number">0.1936</span>],</span><br><span class="line">          [<span class="number">0.3107</span>, <span class="number">0.4428</span>, <span class="number">0.9672</span>, <span class="number">0.0778</span>, <span class="number">0.6484</span>],</span><br><span class="line">          [<span class="number">0.3629</span>, <span class="number">0.7911</span>, <span class="number">0.9783</span>, <span class="number">0.7051</span>, <span class="number">0.5235</span>],</span><br><span class="line">          [<span class="number">0.1730</span>, <span class="number">0.8745</span>, <span class="number">0.1580</span>, <span class="number">0.3193</span>, <span class="number">0.8202</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[<span class="number">0.4327</span>, <span class="number">0.4810</span>, <span class="number">0.0056</span>, <span class="number">0.8400</span>, <span class="number">0.3263</span>],</span><br><span class="line">          [<span class="number">0.1467</span>, <span class="number">0.8376</span>, <span class="number">0.0766</span>, <span class="number">0.5909</span>, <span class="number">0.4188</span>],</span><br><span class="line">          [<span class="number">0.3555</span>, <span class="number">0.7011</span>, <span class="number">0.2004</span>, <span class="number">0.2605</span>, <span class="number">0.5205</span>],</span><br><span class="line">          [<span class="number">0.6036</span>, <span class="number">0.8388</span>, <span class="number">0.0610</span>, <span class="number">0.1489</span>, <span class="number">0.9452</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.5051</span>, <span class="number">0.0161</span>, <span class="number">0.3363</span>, <span class="number">0.1939</span>, <span class="number">0.9949</span>],</span><br><span class="line">          [<span class="number">0.7931</span>, <span class="number">0.2976</span>, <span class="number">0.6276</span>, <span class="number">0.3221</span>, <span class="number">0.1810</span>],</span><br><span class="line">          [<span class="number">0.7623</span>, <span class="number">0.5226</span>, <span class="number">0.7116</span>, <span class="number">0.4818</span>, <span class="number">0.5510</span>],</span><br><span class="line">          [<span class="number">0.9556</span>, <span class="number">0.3049</span>, <span class="number">0.3479</span>, <span class="number">0.9650</span>, <span class="number">0.6561</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.8363</span>, <span class="number">0.0121</span>, <span class="number">0.5926</span>, <span class="number">0.7543</span>, <span class="number">0.4924</span>],</span><br><span class="line">          [<span class="number">0.2830</span>, <span class="number">0.3250</span>, <span class="number">0.7983</span>, <span class="number">0.2548</span>, <span class="number">0.3496</span>],</span><br><span class="line">          [<span class="number">0.2930</span>, <span class="number">0.8676</span>, <span class="number">0.3479</span>, <span class="number">0.1776</span>, <span class="number">0.7081</span>],</span><br><span class="line">          [<span class="number">0.4618</span>, <span class="number">0.9499</span>, <span class="number">0.9068</span>, <span class="number">0.7570</span>, <span class="number">0.2282</span>]]]])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<p>采用层次的眼光来看这个输出结果，瞬间觉得清晰无比！最外层的中括号，是数组的象征，不用管，下一层，竖直方向有两个中括号，对应第一个2；下一层，竖直方向有3个中括号，对应第2个3；再下一层，4个中括号，对应4；最内层，5个数，对应最后一个5。</p>
<p>如果还保留着“行列”的概念，我觉得会被这一层一层的中括号绕晕了。</p>
<p>配合着size的输出来看，更加助于理解。</p>
<h1 id="squeeze、unsqueeze"><a href="#squeeze、unsqueeze" class="headerlink" title="squeeze、unsqueeze"></a>squeeze、unsqueeze</h1><p>我觉得如果没有上面的概念，看squeeze、unsqueeze两个函数的用法，只能明白意思：一个降维一个升维，但具体细节（dim的取值）根本难以理解。</p>
<p>今天上午我盯着不同dim情况下unsqueeze的输出结果看了白天，完全是云里雾里！！到底增加的长度为1的维度加在哪里了？</p>
<p>这里其实有两个问题，一是不知道dim到底怎么起作用；二是不知道怎么看Tensor的维度，不然肯定是可以知道多出来的1个维度加在哪里的。</p>
<p>第二个问题很简单，就是用上面的size函数，直接可以输出Tensor的维度信息。</p>
<p>第一个问题，我受到了该<a href="https://zhuanlan.zhihu.com/p/86763381" target="_blank" rel="noopener">回答</a>的启发。下面详细介绍两个函数。</p>
<h2 id="squeeze"><a href="#squeeze" class="headerlink" title="squeeze"></a>squeeze</h2><p>作用：消去一个或多个维度。<strong>只有在指定的维度长度=1时才生效</strong>。</p>
<p>用法：</p>
<ul>
<li><code>a.squeeze(0)</code>：消去第1个维度（这里的索引是从0开始的，和数组索引一样）</li>
<li><code>a.squeeze(0,2)</code>：消去第1、3个维度</li>
<li><code>a.squeeze()</code>：消去所有长度=1的维度</li>
</ul>
<p>再次声明：如果指定的维度长度不为1，不报错但是也不会有任何作用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.rand(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">b = a.squeeze(<span class="number">0</span>)</span><br><span class="line">c = a.squeeze(<span class="number">1</span>)</span><br><span class="line">d = a.squeeze()</span><br><span class="line">print(a.size())</span><br><span class="line">print(b.size())</span><br><span class="line">print(c.size())</span><br><span class="line">print(d.size())</span><br><span class="line">-------------------</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 原数组维度</span></span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 第一个维度长度=1，被消去</span></span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 第2个维度长度=2，不起作用</span></span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 第1、3两个长度=1的维度都被消去</span></span><br></pre></td></tr></table></figure>
<p>具体的数组我就不输出了，我觉得还不如直接看size来得清楚。我就不多解释了，结合上面的用法说明，相信大家多能看明白。</p>
<p>注意：对于一个n维矩阵，dim取值的范围是<code>-n~n-1</code>。<code>n-1</code>的由来大家很清楚，就是因为索引从0开始，<code>-n</code>的由来是因为索引也可以采用倒序的方式，对于上面的a数组，<code>a.squeeze(-1)</code>表示消去长度=5的维度（当然不会起作用），<code>a.squeeze(-5)</code>表示消去最左边长度=1的维度。这种用法可能会用于数组的长度太长，需要倒序索引的情况，但我相信这种情况可能比较少。</p>
<h2 id="unsqueeze"><a href="#unsqueeze" class="headerlink" title="unsqueeze"></a>unsqueeze</h2><p>作用：增加一个长度=1的维度</p>
<p>用法：<code>a.unsqueeze(t)</code>，在第t+1个<strong>空位</strong>（两个维度之间有一个空位，第一个维度前面和最后一个维度后面各有一个空位）增加一个维度。</p>
<p>注意：一次只能加一个，也就是说只能有一个输入，而不能<code>a.unsqueeze(m,n)</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.rand(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = a.unsqueeze(<span class="number">0</span>)</span><br><span class="line">c = a.unsqueeze(<span class="number">1</span>)</span><br><span class="line">d = a.unsqueeze(<span class="number">2</span>)</span><br><span class="line">----------------</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p>这里的dim取值范围为<code>-(n+1)~n</code>，正负范围都比squeeze要宽一个数，很好理解：5个人站一排，中间有6个空位。到了这里大家应该更加理解我前面的”第t+1个空位“是什么意思了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>刚接触unsqueeze，我看着输入不用的dim值得到的输出结果陷入沉思，试图用肉眼解析出dim到底是控制了啥？维度到底加在哪里了？甚至发现dim的取值范围是可以变化的！更加有些崩溃。</p>
<p>我认为最重要的理解上的突破就是从嵌套关系、嵌套层次的角度去理解Tensor高维数组，摒弃了“行列”的概念。我称之为理解了“维度”的概念。</p>
<p>理解了“维度”的概念后，回过头看usqueeze和unsqueeze，在指定位置加减维度而已，根本不用把数组输出来，直接看size，之前的困惑一扫而空。</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy入门</title>
    <url>/2020/07/12/AI/numpy/</url>
    <content><![CDATA[<p>numpy入门学习~~我咋觉得就是把matlab的各种定义又学了一遍<code>(*/ω＼*)</code></p>
<a id="more"></a>
<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h2><p><code>pip install numpy</code></p>
<p><code>import numpy as np</code></p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>貌似机器学习AI这一块都叫“数组”、“多维数组”，不叫矩阵了？但其实意思都是一个意思，下文就不特别区分了。</p>
<h3 id="手动输入元素"><a href="#手动输入元素" class="headerlink" title="手动输入元素"></a>手动输入元素</h3><p>元素分隔必须用英文逗号，空格报错！！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b=np.array([[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">2</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/12/AI/numpy/image-20200712190946893.png" width="100"></p>
<p>注意：圆括号、中括号是怎么放的！</p>
<ul>
<li>单行或单列<code>array([2,3])</code></li>
<li>多行或多列，<code>np.array([2,3;2,2])</code>这样是报错的！！必须一行写在一个[]里面，然后不同行的[]之间用逗号隔开，<strong>最后整个外面还要加上一个[]</strong>！！这个不能忘！（从matlab过来觉得这个好麻烦~~不过习惯了应该就好了。）</li>
<li>这种方式，中括号里面填的就是具体的元素值。</li>
</ul>
<h3 id="创建全1、全0、随机数组"><a href="#创建全1、全0、随机数组" class="headerlink" title="创建全1、全0、随机数组"></a>创建全1、全0、随机数组</h3><p>即matlab中的ones和zeros。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.ones([<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b=np.zeros([<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/12/AI/numpy/image-20200712191836818.png" width="100"></p>
<p>注意：</p>
<ul>
<li>这里填的数字表示有几行几列，同样也要放在中括号里面！！</li>
<li>除了二维矩阵，同样可以定义高维的，其实也就是多个二维数组拼在一起。<code>a=np.ones([5,3,4])</code>里的第一个数字是第三个维度，后两个是行数和列数。和matlab相反：matlab是最后一个数表示第三个维度。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.empty([<span class="number">5</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/12/AI/numpy/image-20200712192708907.png" width="300"></p>
<h3 id="对单个元素进行赋值"><a href="#对单个元素进行赋值" class="headerlink" title="对单个元素进行赋值"></a>对单个元素进行赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b[<span class="number">0</span>,<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/12/AI/numpy/image-20200712192240696.png" width="200"></p>
<ul>
<li>指定某个元素不用加()了；</li>
<li>索引是从0开始的，和matlab不一样~~</li>
</ul>
<h3 id="获取属性的函数"><a href="#获取属性的函数" class="headerlink" title="获取属性的函数"></a>获取属性的函数</h3><p>类似于matlab中的size、length等。</p>
<ol>
<li><p><code>ndim</code>：返回维度数量</p>
</li>
<li><p><code>shape</code>：返回具体的维度情况</p>
</li>
<li><p><code>size</code>：返回元素总数</p>
</li>
<li><code>dtype</code>：元素类型</li>
<li><code>itemsize</code>：返回数组中每个元素的字节大小。1字节=8位，如果一个元素的dtype是float64，那么其itemsize是8（64/8=8）。</li>
</ol>
<p>测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.ones([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(a.itemsize)</span><br><span class="line">print(a)</span><br><span class="line">print(a.ndim)</span><br><span class="line">print(a.shape)</span><br><span class="line">print(a.size)</span><br><span class="line">print(a.dtype)</span><br><span class="line">a=np.ones([<span class="number">2</span>,<span class="number">3</span>],dtype=np.int32)</span><br><span class="line">print(a.dtype)</span><br><span class="line">a.itemsize</span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/12/AI/numpy/image-20200712201138470.png" width="200"></p>
<h2 id="多维数组的基本操作"><a href="#多维数组的基本操作" class="headerlink" title="多维数组的基本操作"></a>多维数组的基本操作</h2><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p><code>+-*/</code>都是对应元素运算，相当于matlab的点运算。和常数进行四则运算就是每个元素都和这个常数进行运算；<code>m*n</code>矩阵和<code>m*1</code>、<code>1*n</code>矩阵运算同matlab，就是一竖排或者一横排排过去进行运算（我相信你懂我意思<code>(*/ω＼*)</code>）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a)</span><br><span class="line">a-np.ones([<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">-------</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure>
<h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>这个有点不严谨的样子：</p>
<ul>
<li>a.dot(b)、np.dot(a,b)都表示进行矩阵方式的运算，语法上也必须满足矩阵相乘的格式条件：前面的列数=后面的行数。这个没什么好说的；</li>
<li>但是对于1行or1列的矩阵（向量、数组？？区别参考<a href="https://blog.csdn.net/wqx521/article/details/86646501" target="_blank" rel="noopener">博客</a>，向量：一维数字；矩阵：二维数组：更加广义，可以有高维数组——相当于n个二维数组），所以前面“1行or1列的矩阵”更加严谨的说法是，对于“向量”。对于向量，直接填值得到的向量和用ones得到的向量还不一样（或者说，numpy认为通过ones得到的都是“矩阵”，必须遵守矩阵乘法的格式；而填值得到的向量才是向量？）！！见下面的例子：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=np.ones([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">d=np.ones([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(c.dot(d))</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-69</span>-b9e8edf9b827&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> c=np.ones([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">      <span class="number">2</span> d=np.ones([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">----&gt; 3 print(c.dot(d))</span><br><span class="line"></span><br><span class="line">ValueError: shapes (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">and</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">not</span> aligned: <span class="number">2</span> (dim <span class="number">1</span>) != <span class="number">1</span> (dim <span class="number">0</span>)</span><br><span class="line">%报错~~</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line">c=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">d=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">c.dot(d)</span><br><span class="line">------</span><br><span class="line"><span class="number">14</span>%这倒也不是点乘的结果，但理论上cd是不满足格式要求的</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">c=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">d=np.array([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br><span class="line">c.dot(d)</span><br><span class="line">------</span><br><span class="line">array([<span class="number">14</span>])%！！！！差别：这里的输出是array格式~~</span><br><span class="line">%总之以后自己还是用这种方式</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line">d=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line">c.dot(d)</span><br><span class="line">------</span><br><span class="line">%报错，不满足矩阵乘法格式</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a)</span><br><span class="line">b=<span class="number">2</span>*np.ones([<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">print(b)</span><br><span class="line">a.dot(b)</span><br><span class="line">------</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line">[[<span class="number">2.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">2.</span>]]</span><br><span class="line"></span><br><span class="line">array([[<span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">6.</span>]])%这是一切正常的矩阵乘法结果</span><br></pre></td></tr></table></figure>
<h3 id="数组的自身运算"><a href="#数组的自身运算" class="headerlink" title="数组的自身运算"></a>数组的自身运算</h3><ul>
<li>min</li>
<li>max</li>
<li>sum</li>
</ul>
<p>上述指令默认都是在<strong>所有元素中</strong>进行操作，通过显式指定axis的值，可以控制找出行or列中最大、最小，对行or列进行求和。（matlab默认就是对某一维度进行操作）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(c)</span><br><span class="line">print(c.max())</span><br><span class="line">print(c.max(axis=<span class="number">0</span>))</span><br><span class="line">print(c.max(axis=<span class="number">1</span>))</span><br><span class="line">------</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>当axis=0时， 计算方向是针对数组的列的； 当axis=1时， 计算方向是针对数组的行的。  </p>
<p>注意：无论计算方向是行还是列，print之后都是行向量，和matlab同样有所区别。</p>
<p><img src="/2020/07/12/AI/numpy/image-20200712205853289.png" width="200"></p>
<ul>
<li>exp： 对数组中的所有元素进行指数运算</li>
<li>sqrt： 对数组中的所有元素进行平方根运算</li>
<li>square： 对数组中的所有元素进行平方运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.exp(a)</span><br><span class="line">np.sqrt(a)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="随机数组"><a href="#随机数组" class="headerlink" title="随机数组"></a>随机数组</h3><ul>
<li>seed ：指定<strong>随机因子</strong>。在随机数生成器的随机因子被确定后，无论我们运行多少次随机程序，最后生成的数字都是一样的，随机因子更像把随机的过程变成一种伪随机的机制，不过这有利于结果的复现。  </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">42</span>)%指定随机因子</span><br></pre></td></tr></table></figure>
<ul>
<li>rand ：生成[0,1)范围内满足均匀分布的随机样本数 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.random.rand(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">------</span><br><span class="line">[[<span class="number">0.56475521</span> <span class="number">0.71919785</span> <span class="number">0.9597795</span> ]</span><br><span class="line"> [<span class="number">0.33212166</span> <span class="number">0.73143443</span> <span class="number">0.02402927</span>]]</span><br></pre></td></tr></table></figure>
<ul>
<li>randn ：生成满足平均值为0且方差为1的正态分布随机样本数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.random.randn(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">------</span><br><span class="line">[[<span class="number">-0.54328833</span> <span class="number">-0.71339633</span>  <span class="number">1.01072555</span>]</span><br><span class="line"> [ <span class="number">0.05086991</span>  <span class="number">0.17593388</span> <span class="number">-0.37334657</span>]]</span><br></pre></td></tr></table></figure>
<ul>
<li>randint ：生成一个给定的范围内的随机整数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(np.random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">------</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>binomial ：生成一个维度指定且满足二项分布的随机样本数 </p>
</li>
<li><p>beta ：生成一个指定维度且满足beta分布的随机样本数</p>
</li>
<li>normal ：生成一个指定维度且满足高斯正态分布的随机样本数  </li>
</ul>
<p>这种东西需要的时候再查也可以的。</p>
<h3 id="索引、切片和迭代"><a href="#索引、切片和迭代" class="headerlink" title="索引、切片和迭代"></a>索引、切片和迭代</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">10</span>)</span><br><span class="line">--</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">--------------</span><br><span class="line">print(a[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line">print(a[:<span class="number">5</span>])</span><br><span class="line">--</span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]%包括前面的不包括后面的</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)</span><br><span class="line">--</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span>%缩进和冒号都不能少</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(a[<span class="number">1</span>])</span><br><span class="line">print(a[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(a[:,<span class="number">1</span>])</span><br><span class="line">print(a[<span class="number">1</span>,:])%这些操作和matlab基本是一样的</span><br><span class="line">--</span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>]]</span><br><span class="line">[<span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"><span class="number">7</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">[<span class="number">2</span> <span class="number">6</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i)</span><br><span class="line">--</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line">[ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        print(j)</span><br><span class="line">--</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a.flat:</span><br><span class="line">    print(i)</span><br><span class="line">--</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.flat)</span><br><span class="line">--</span><br><span class="line">&lt;numpy.flatiter object at <span class="number">0x00000271468D42B0</span>&gt;%这是啥？？</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>PSCAD4.6安装教程</title>
    <url>/2020/07/12/%E6%95%99%E7%A8%8B/pscad4.6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>4.6比4.5简直好用不要太多！！！（虽然我觉得整个pscad比起simulink给人的感觉还是要难用好多~~）下面就给出4.6的安装链接及安装关键点。</p>
<a id="more"></a>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>百度云链接：<a href="https://pan.baidu.com/s/1nKhOCmMOEvnU4yWyKCWAAw" target="_blank" rel="noopener">https://pan.baidu.com/s/1nKhOCmMOEvnU4yWyKCWAAw</a><br>提取码：0cjt</p>
<p>安装包和教程都在里面了（链接失效可评论留言）。</p>
<p>这位资源的分享者非常热心地录制了一个视频，照着来基本上没什么大问题。虽然我自己经历了几次重新卸载安装~~</p>
<h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><h2 id="开启测试模式"><a href="#开启测试模式" class="headerlink" title="开启测试模式"></a>开启测试模式</h2><p>管理员身份运行命令行工具，运行<code>bcdedit /set testsigning on</code>即可。</p>
<p>但我的win10直接运行是不成功的，需要进入电脑bios设置界面，手动把Secure Boot Policy这个安全启动选项调整为关闭状态。参考<a href="http://www.xitongcheng.com/jiaocheng/win10_article_43955.html" target="_blank" rel="noopener">链接</a>，这个网上一搜也一堆。</p>
<p>如何进入bios呢？</p>
<p>在电脑开机的时候，一直按ESC键，就会打开电脑的启动菜单，选择相应的菜单项就可以进入相应的功能，在启动菜单中按F10键可以进入BIOS。参考<a href="https://jingyan.baidu.com/article/e8cdb32b0b25de37052baded.html" target="_blank" rel="noopener">链接</a>。</p>
<p>方法应该不止一种，我用的是上面的，具体方法网上一搜也一堆。</p>
<p>这个是<strong>必须要</strong>的！！我第一次因为这个没开，破解工具里的驱动是装不了的！！</p>
<h2 id="管理员身份运行"><a href="#管理员身份运行" class="headerlink" title="管理员身份运行"></a>管理员身份运行</h2><p>视频里提到了几处以管理员身份运行的地方，大家最好严格按照来操作即可。</p>
<h2 id="license失效"><a href="#license失效" class="headerlink" title="license失效"></a>license失效</h2><p>貌似软件偶尔会提醒license失效，按照破解步骤重新操作一篇即可（驱动reinstall之类的，反正多点几遍rexxxx就对了），虽然有些麻烦，但毕竟自己是白嫖的。</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题改变文章字体大小</title>
    <url>/2020/07/11/%E6%95%99%E7%A8%8B/next_changefontsize/</url>
    <content><![CDATA[<p>对我来说next和yilia两个主题各有优劣：next排布看上去规整很多，但有时候就是太规整了让人觉得过于严肃，过于技术风，而且正文的默认字体、字号我不是很喜欢；yilia的字体和配色让我觉得更适合写文字，我很喜欢（话说yilia作者的文笔真的好好，他的文章读起来太舒服了，附上作者博客<a href="http://litten.me/" target="_blank" rel="noopener">地址</a>）。</p>
<a id="more"></a>
<p>next字体的修改可参考这篇<a href="https://leay.net/2020/02/14/hexo-next-font/#%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">博客</a>。在博客的yml文件里本来是直接有各个部分的字体字号修改的，但是我这边修改global可以生效，post无法生效。按照上面的博客，我把global字体改成了[思源宋体]，挺好看的。</p>
<p>所以下面就是改字号的问题了。网上找了一圈没找到满意的解答，然后照着html源代码找了一圈，终于让我找到了自认为很方便的修改方法。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>具体方法如下：</p>
<p>1、找到<code>themes\next\layout\_macro</code>路径下的<code>post.swig</code>文件</p>
<p><img src="/2020/07/11/%E6%95%99%E7%A8%8B/next_changefontsize/image-20200711103910355.png" width="600" style="zoom:80%;"></p>
<p>2、找到<code>post body</code>部分</p>
<p><img src="/2020/07/11/%E6%95%99%E7%A8%8B/next_changefontsize/image-20200711105121656.png" width="600"></p>
<p>3、在div中加入字体大小样式<code>style=&quot;font-size:14px&quot;</code>，个人觉得14px大小看着挺舒服的。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>图片方面，next比较好的地方就是他会自动帮你居中，看generate之后的html源码可以看到自动生成了<code>&lt;center&gt;&lt;/center&gt;</code>，但是：</p>
<ol>
<li><p>next会自动给图片加上标题，就是会把<code>alt=&quot;xxx&quot;</code>里面的内容放在图片下面。很多时候图片是截图的，名字都是imgxxxx一堆乱七八糟的，所以就得手动删掉。对比之下，删alt比加center还是方便一些。</p>
</li>
<li><p>有时候是不希望图片居中的<img src="/2020/07/11/%E6%95%99%E7%A8%8B/next_changefontsize/05CC0954.gif" width="20">。比如这个图片在yilia主题下是会显示在文字中间的（下图是typora的显示效果），也是我想要的效果。next里面我没找到给图片加居中效果样式的地方，要是开放出来变成可以选择的就好了。</p>
<p><img src="/2020/07/11/%E6%95%99%E7%A8%8B/next_changefontsize/image-20200711110440902.png" width="500"></p>
</li>
</ol>
<p>next的确集成了很多东西，不用自己操心。最开始用yilia的时候很多功能都是照着网上一点点加的，这个过程有点麻烦，但还是有点小小的成就感。</p>
<p>就这样~</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>追番</title>
    <url>/2020/07/09/%E7%94%9F%E6%B4%BB/%E8%BF%BD%E7%95%AA/</url>
    <content><![CDATA[<p>沉迷追番无法自拔。</p>
<a id="more"></a>
<p>这阵子陷入了明明还有事情没干，但就是不想动手的状态。选择各种浪，或者学一些不用很费脑子带来虚假成就感的东西。</p>
<p>晚上几乎都睡得很晚，过了12点，搭个人网站第一天甚至搞到了3点左右：睡了又爬起来，就像把每个功能立马实现，跟打了鸡血一样。第一次拥有自己的网站的确很开心，积极性很高，是不是也间接反映了真正热爱的事业的确是能让人饱含热情的。</p>
<p>晚上睡得晚，早上起得晚，恶性循环。</p>
<p>之前连着追了几部网络小说改的国漫：《武动乾坤》、《逆转次元：AI崛起》。起因是在网易云看到一个国漫混剪，建模确实好看，就找来动漫看了看。然后由于这几部动漫突然对网络小说感兴趣，甚至在B站看了不少网络小说盘点的视频。</p>
<p>期间亦打红警，刷《盘龙》，看完了《ReLIFE》、《月色真美》（6.28左右的事儿），一个星期前还看完了《昨日之歌》、《白色相簿2》。《昨日之歌》其实我挺喜欢的，有时间说不定重温单独说一说。</p>
<p>再往前推其实还看了JoJo前三部，到了替身那一部就没看了。还看了overlord，第三部看了前面几集没看了。</p>
<p>最近的话就是7.1开始猛刷了一波火影忍者，一直到150集左右，两倍速+是不是快进，期间还看完了《The Last》剧场版。上周浪的主调就是火影。</p>
<p>这周突然没有欲望继续看了，但是看了几期up主做的剧情向的视频。这周浪的主调就是搭个人博客+今天学css。</p>
<p>真的不能再浪了<img src="/2020/07/09/%E7%94%9F%E6%B4%BB/%E8%BF%BD%E7%95%AA/09C99002.gif" alt="img" width="50">~~有点晚了，今天一定要早睡！！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>闲聊</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS学习第一课</title>
    <url>/2020/07/09/%E6%95%99%E7%A8%8B/css/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文为CSS学习的第一课（对应视频p1-p11），参考资料为B站<code>狂神说Java</code>教学<a href="https://www.bilibili.com/video/BV1YJ411a7dy" target="_blank" rel="noopener">视频</a>。</p>
<a id="more"></a>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>由于本文主角为CSS，所以只介绍HTML的基本概念。</p>
<ul>
<li>HTML文档由HTML<strong>元素</strong>定义；</li>
<li><strong>元素</strong>：包含开始标签、结束标签、元素内容；</li>
<li>大多数<strong>元素</strong>可拥有<strong>属性</strong>。</li>
</ul>
<p>开始标签：<code>&lt;p&gt;</code></p>
<p>结束标签：<code>&lt;/p&gt;</code></p>
<p>元素内容：<code>&lt;p&gt;这是一个段落&lt;/p&gt;</code>中的“这是一个段落”</p>
<p>属性：<code>&lt;p class=&quot;y1&quot;&gt;123123&lt;/p&gt;</code>、<code>&lt;a href=&quot;www.baidu.com&quot; class=&quot;text decorated-root xxx&quot; id=&quot;j&quot;&gt;今天&lt;/a&gt;</code>中放在开始标签里面的就是属性，类似于键值对的形式成对出现。</p>
<p>下文的叙述也会遵照上面的术语。</p>
<h1 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h1><ul>
<li>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li>
<li>样式定义<strong>如何显示</strong> HTML 元素</li>
<li>样式通常存储在<strong>样式表</strong>中</li>
<li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li>
<li><strong>外部样式表</strong>可以极大提高工作效率</li>
<li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li>
<li>多个样式定义可<strong>层叠</strong>为一个</li>
</ul>
<blockquote>
<p>——引用自<a href="https://www.runoob.com/css/css-intro.html" target="_blank" rel="noopener">菜鸟教程</a>。</p>
</blockquote>
<h1 id="CSS的添加方式"><a href="#CSS的添加方式" class="headerlink" title="CSS的添加方式"></a>CSS的添加方式</h1><h2 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h2><p>直接在html元素的开始标签内部通过style属性添加。示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background: yellow;height: 50px;line-height: 50px"</span>&gt;</span></span><br><span class="line">yello and other colors</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是该种方式一次只能改一个元素的样式，并且不便于复用。但是在小范围改动时倒是挺方便的，我觉得有必要掌握。</p>
<h2 id="通过style元素添加"><a href="#通过style元素添加" class="headerlink" title="通过style元素添加"></a>通过style元素添加</h2><p>style元素一般放在<code>&lt;head&gt;</code>标签内部，置于正文之前。实例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h2&#123;</span><br><span class="line">        color: beige;</span><br><span class="line">        size: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    h1&#123;</span><br><span class="line">        color: beige;</span><br><span class="line">        size: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>&lt;style&gt;  &lt;/style&gt;</code>是html元素，但是内部其实是css的内容，也遵从css的语法规范，注释采用的是<code>/*xxx*/</code>的方式，而不是html中<code>&lt;!--xxx--&gt;</code>的形式。</p>
<p>语法规则：我觉得看上面的实例就够清楚了。</p>
<p>这种方式是将所有样式从html中剥离出来，优点显而易见，可以<strong>批量修改样式</strong>，而且复用直接把整个<code>&lt;style&gt;</code>元素复制粘贴就可以。</p>
<h2 id="外部样式表：CSS文件"><a href="#外部样式表：CSS文件" class="headerlink" title="外部样式表：CSS文件"></a>外部样式表：CSS文件</h2><p>这种方式不过是上一种方式的进一步剥离，干脆都不在html文档里了，直接自成一个文件。CSS文件的语法规则依旧不变：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: aqua;</span><br><span class="line">    <span class="attribute">size</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意不能有首位的<code>&lt;style&gt;</code>了！这是html标签，在css中不应该存在。</p>
<p>如何在html中引入样式文件？在<code>&lt;head&gt;</code>元素内容中添加如下任一种：</p>
<ol>
<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;</code></li>
<li></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(<span class="string">"css/style.css"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>推荐第一种，更加简洁。</p>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>html元素可以拥有的样式（大小、颜色等等）是固定的，虽然多，但不外乎一张大表格，难点就在于如何精准定位到我们想要修改样式的元素，而这正是选择器的作用。</p>
<p>至于审美设计之类的东西，那就不在我们的考虑范畴了。选择器有如下几种分类：</p>
<ol>
<li>基本选择器</li>
<li>层次选择器</li>
<li>结构伪类选择器</li>
<li>属性选择器</li>
</ol>
<p>下面将依次介绍。</p>
<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><p>接下来的说明结合具体的html内容可能更好理解，所以先给出html文档中的<code>&lt;body&gt;</code>部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"j"</span>&gt;</span>jby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"y"</span>&gt;</span>jby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>jby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"j"</span>&gt;</span>jby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>jby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"y"</span>&gt;</span>jby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"y"</span>&gt;</span>江博游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>顾名思义，该选择器用于选择一类标签，比如全部的h1，全部的p。我们前面的给出的简单实例都是这种选择器。样式针对指定的标签生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h2&#123;</span><br><span class="line">        color: beige;</span><br><span class="line">        size: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    h1&#123;</span><br><span class="line">        color: beige;</span><br><span class="line">        size: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="类选择器："><a href="#类选择器：" class="headerlink" title="类选择器："></a>类选择器：</h3><p>类，即<code>class</code>，本身也是html元素的一个属性，添加方式也是在开始标签中添加。完整的html元素属性表见该<a href="https://www.runoob.com/tags/ref-standardattributes.html" target="_blank" rel="noopener">链接</a>。</p>
<p>该选择器选择class属性相同的标签，和标签具体类别无关（也就是说可以跨标签选取元素），h1，p啥的都可以。用法：<code>.classname{}</code>，即通过<code>.</code>引用类名。<strong>类名是可以重复的，即多个元素可以拥有相同的类名，而且类名可以拥有多个，</strong>多个类名之间用空格隔开。</p>
<p>示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.j</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.b</span>&#123;</span></span><br><span class="line">        color: bisque;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.y</span>&#123;</span></span><br><span class="line">        color: blueviolet;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果有多个类名的话，引用的时候哪个生效呢？实验如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"j b"</span>&gt;</span>jby<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>改变class中j和b的顺序，jby字体颜色不变——class属性值是无序的，顺序在此处无影响；</li>
<li>改变style中j和b两个类的设置顺序，jby字体颜色改变，而且是显示顺序上位于后面的设置的颜色——两个样式设置都定位于同一个元素的话，后面的设置会覆盖前面的设置。</li>
<li>添加字体大小设置——“覆盖”只会针对相同的样式属性设置，比如后者的字体颜色会覆盖前者的字体颜色，但如果后者没有设置字体大小，那么还是保留前者的字体大小。</li>
<li>总结：<strong>写了新的，就覆盖旧的</strong>，很合乎情理。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.b</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: bisque;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.j</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: aqua;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>该选择器选中全局唯一id对应的标签。用法：<code>#id{}</code>，区别于类，id用<code>#</code>选择。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#y</span>&#123;</span></span><br><span class="line">        color: blueviolet;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#j</span>&#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#b</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>id选择器&gt;类选择器&gt;标签选择器</p>
<h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><p>顾名思义，层次选择器涉及html中元素之间的层级关系，比如某个p元素的相邻p元素，参考下图（<em>来源于狂神视频截图</em>）。</p>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709175040799.png" width="400"></p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        不是段落</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>网页显示效果如下：</p>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709180531092.png" width="150"></p>
<p>层次选择器有以下几种分类：</p>
<ul>
<li>后代选择器</li>
<li>子选择器</li>
<li>相邻兄弟选择器</li>
<li>通用选择器</li>
</ul>
<p>下面将一一介绍。</p>
<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>选择某一层级标签的所有后代标签（不只是后一代，所有后代都算，儿子、孙子等等），用法<code>标签 标签</code>：标签+空格+标签。下面代码的意思就是body标签的所有子代中的p标签采用该样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body p&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ff1c37</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到不只是p1、p2、p3，4、5、6也变了，但是非p的没变。</p>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709180617207.png" alt="image-20200709180617207" width="150"></p>
<h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><p>选择某一层级标签的所有子一代标签（儿子算，孙子不算），用法<code>标签&gt;标签</code>：标签+&gt;+标签。下面代码的意思就是body标签的所有子一代中的p标签采用该样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&gt;p&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ff1c37</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709180751886.png" alt="image-20200709180751886" width="150"></p>
<h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><p>选择某标签<strong>向下</strong>相邻的标签，只选中下一个，多的没有（“弟弟选择器”）。用法：<code>某元素+标签</code>。显然一般需要通过class或id指定了某一个（或一些）元素，才方便用这种方式。</p>
<p>为测试方便，给第一个p添加class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.t</span>+<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ff1c37</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709181356470.png" alt="image-20200709181356470" width="150"></p>
<p>只有p1向下相邻的p2变色。</p>
<p>进一步测试：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>pp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        不是段落</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>p7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>hhh<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p9<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709182319590.png" alt="image-20200709182319590" width="150"></p>
<p>通过上面的例子看出，用层级选择器，要把html中的层级关系搞清楚，ul算一个层级，li又是一个层级，底下的p又是一个层级。</p>
<h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>当前选中标签的向下的全部兄弟标签（”所有弟弟选择器“）。用法：<code>某便签~标签</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.act</span>~<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ff1c37</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"act"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>pp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        不是段落</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>p7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p8<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span>hhh<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p9<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709182940917.png" alt="image-20200709182940917" width="150"></p>
<h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><p>伪类，直接特征是后面带冒号，起到过滤的作用。看例子就明白了。</p>
<ul>
<li><code>ul li:first-child</code>是设置无序列表中的第一项；</li>
<li><code>ul li:last-child</code>是设置无序列表中的最后一项；</li>
<li><code>p:nth-child(3)</code>是设置p的同层级的第3个元素，就算不是p类型也会统计进去，但如果第3个元素和前面的标签（此处为p）不匹配，则样式不生效，此处第3个是p2（h1是第一个）；</li>
<li><code>p:nth-of-type(3)</code>跟上面的区别就是，此处的数字是指同层级下同类型的第3个，不是前面标签指定的类型则不会被计入。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(3)</span>&#123;    <span class="comment">/*这个数字就是第几个子元素，和类型无关，但如果指定的第x的类型和前面的便签不匹配就不生效*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ff0000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(3)</span>&#123;    <span class="comment">/*这个数字不是按顺序的第几个，而是该类型的第x个，比如第一个不是p，那么就不会被算进去，所以说这种设置只要有p元素就一定会生效的*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#0000ff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hade1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709213112427.png" alt="image-20200709213112427" width="150"></p>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>每个元素都有很多属性（href、class、id等），通过属性选择器可以筛选出属性满足要求的元素，改变其样式。而且可以结合正则表达式来批量筛选。</p>
<p>下图是教程视频里的一波设置，本文中并未用到，只是觉得这个设置比较丰富，可以作为参考留个印象。</p>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709115722112.png" alt="image-20200709115722112" width="200"></p>
<ul>
<li><code>a[id=&quot;j&quot;]</code>筛选出id为j的a元素，赋予样式；</li>
<li><code>a[class*=&quot;jby&quot;]</code>筛选出class包含jby的a元素（注意此处有样式的覆盖）；</li>
<li><code>a[class^=&quot;xxx&quot;]</code>class以xxx开头的</li>
<li><code>a[class$=&quot;xxx&quot;]</code>class以xxx结尾的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[id=<span class="string">"j"</span>]</span>&#123;</span></span><br><span class="line">        color: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">"jby"</span>]</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        font-size: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[class^=<span class="string">"xxx"</span>]</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        font: bold 40px/50px Arial;/*单单设置一个bold还报错，必须后面的都设置*/</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[class$=<span class="string">"xxx"</span>]</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        font: bold 20px/50px Arial;/*单单设置一个bold还报错，必须后面的都设置*/</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"text decorated-root xxx"</span> <span class="attr">id</span>=<span class="string">"j"</span>&gt;</span>今天<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.taobao.com"</span> <span class="attr">class</span>=<span class="string">"xxx cbd jby"</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abc"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"a.pdf"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jby x"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jby y"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709214750003.png" alt="image-20200709214750003" width="150"></p>
<p>实际使用过程中，应该还是基本选择器用得最多，其他的能看懂就好，不常用的肯定也记不长久。</p>
<h1 id="美化网页元素"><a href="#美化网页元素" class="headerlink" title="美化网页元素"></a>美化网页元素</h1><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>可分开设置，可以用<code>font:xxx</code>一次性设置。</p>
<p><a href="https://www.w3school.com.cn/cssref/pr_font_font.asp" target="_blank" rel="noopener">font</a>可按顺序设置如下属性：</p>
<ul>
<li>font-style</li>
<li>font-variant</li>
<li>font-weight</li>
<li>font-size/line-height</li>
<li>font-family</li>
</ul>
<p>也可只设置其中某些，未设置的会采用默认值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Arial Black"</span>,楷体; <span class="comment">/*可以同时写两个，一个指定英文及数字，一个指定中文*/</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;<span class="comment">/*px——像素，em——缩进（较大）*/</span></span><br><span class="line"><span class="attribute">font-weight</span>: bold;<span class="comment">/*字体粗细*/</span></span><br><span class="line"><span class="attribute">color</span>: rosybrown;<span class="comment">/*字体颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><p>颜色：rgb(xx,xx,xx)   rgba(xx,xx,xx,0~1)不透明度</p>
<p>文本居中：<code>text-align: center;</code>单纯的html中是没有居中的选项的（好像）</p>
<p>首行缩进（2字符）：<code>text-indent: 2em;</code></p>
<p>行高：<code>line-height</code></p>
<p>区域高度：<code>height</code></p>
<p>实现单行文字上下居中：行高和块的高度<code>height line-height</code>一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background: yellow;height: 50px;line-height: 50px"</span>&gt;</span></span><br><span class="line">yello and other colors</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709220247222.png" alt="image-20200709220247222" width="200"></p>
<p><code>height=20</code>：</p>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709220540771.png" alt="image-20200709220540771" width="200"></p>
<p><code>line-height=20</code>：</p>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709220622842.png" alt="image-20200709220622842" width="200"></p>
<p>装饰：<code>text-decoration</code>，上、下、中划线，去除装饰等</p>
<p>文本图片上下居中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">img,span&#123;</span><br><span class="line">vertical-align: middle;/*两个元素垂直居中*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&lt;&lt;img src="../img/1.jpg" width="100" &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709220859720.png" alt="image-20200709220859720" width="200"></p>
<p>这种东西很多都是需要用的时候再去查就可以了，平时如果用得不多，也很难记住。</p>
<p>汇总：</p>
<p><strong>style：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Arial Black"</span>,楷体; <span class="comment">/*可以同时写两个，一个指定英文及数字，一个指定中文*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;<span class="comment">/*px——像素，em——缩进（较大）*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold;<span class="comment">/*字体粗细*/</span></span><br><span class="line">    <span class="attribute">color</span>: rosybrown;<span class="comment">/*字体颜色*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p1</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;<span class="comment">/*首行缩进两字符*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id=<span class="string">"j"</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">"jby"</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class^=<span class="string">"xxx"</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font</span>: bold <span class="number">40px</span>/<span class="number">50px</span> Arial;<span class="comment">/*单单设置一个bold还报错，必须后面的都设置*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class$=<span class="string">"xxx"</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">50px</span> Arial;<span class="comment">/*单单设置一个bold还报错，必须后面的都设置*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.y1</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">background</span>: aqua;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.y2</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.y3</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;<span class="comment">/*去下划线*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;<span class="comment">/*两个元素垂直居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>HTML，body部分：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"text decorated-root xxx"</span> <span class="attr">id</span>=<span class="string">"j"</span>&gt;</span>今天<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.taobao.com"</span> <span class="attr">class</span>=<span class="string">"xxx cbd jby"</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abc"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"a.pdf"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jby x"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"jby y"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>gaishu<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span></span><br><span class="line">    平静安详的元泱境界，每隔333年，总会有一个神秘而恐怖的异常生物重生，它就是魁拔！魁拔的每一次出现，都会给元泱境界带来巨大的灾难！即便是天界的神族，也在劫难逃。在天地两界各种力量的全力打击下，魁拔一次次被消灭，但又总是按333年的周期重新出现。魁拔纪元1664年，天神经过精确测算后，在第六代魁拔苏醒前一刻对其进行毁灭性打击。但谁都没有想到，由于一个差错导致新一代魁拔成功地逃脱了致命一击。很快，天界魁拔司和地界神圣联盟均探测到了魁拔依然生还的迹象。因此，找到魁拔，彻底消灭魁拔，再一次成了各地热血勇士的终极目标。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background: yellow;height: 50px;line-height: 50px"</span>&gt;</span></span><br><span class="line">yello and other colors</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"y1"</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"y2"</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"y3"</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/1.jpg"</span> <span class="attr">width</span>=<span class="string">"100"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709221239320.png" alt="image-20200709221239320" width="800"></p>
<h2 id="超链接伪类"><a href="#超链接伪类" class="headerlink" title="超链接伪类"></a>超链接伪类</h2><p>如下图，简单理解就是多了一些操作：</p>
<p><img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709162630960.png" alt="image-20200709162630960" width="400"></p>
<p>直接举例，style和body如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*默认效果*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标移上去之后的效果*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标按住不放的效果*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*阴影的颜色  阴影的水平移动距离  竖直移动距离  模糊半径（越大越模糊，0则是完全复制一份）*/</span></span><br><span class="line"><span class="selector-id">#pi</span>&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#ff1c37</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/613927.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>姓名：雷丘<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    把href设置为#就是留在原页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>￥99<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"pi"</span>&gt;</span>jintain<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>正常：<img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709221930043.png" alt="image-20200709221930043" width="200"></li>
<li>鼠标移动上去：<img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709222023938.png" alt="image-20200709222023938" width="200"></li>
<li>鼠标点击不放：<img src="/2020/07/09/%E6%95%99%E7%A8%8B/css/image-20200709222101831.png" alt="image-20200709222101831" width="200"></li>
</ul>
<p>新知识：<a href="https://www.w3school.com.cn/html5/html5_nav.asp" target="_blank" rel="noopener">nav 标签</a> 、html中的<a href="https://www.cnblogs.com/chenshihaook/p/6186343.html" target="_blank" rel="noopener">几种空格</a></p>
<h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><p>感觉整理的时间比看视频的时间还要长~</p>
<p>但是整理确实是有必要的。以前为了省时间，会拼命刷一波视频，随手记两笔笔记，也比较凌乱。如果看完后没有及时练习，过一段时间，基本上细节就忘得差不多了，实际动手可能还是要重新翻视频。翻来覆去还不如当初慢一点，好好消化。</p>
<p>而且，凌乱的笔记万万不可取！边听边记可能的确会乱一些，但是一定要事后及时整理，不然到后面自己都看不懂，笔记也没有意义了。</p>
<p>整理笔记的过程也是整理思路的过程，总之每天进步一点点，才能快一点。</p>
<p><strong>苟有恒，何必三更眠五更起；最无益，莫过一日曝十日寒。</strong></p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客时间添加时分秒</title>
    <url>/2020/07/08/%E6%95%99%E7%A8%8B/hexo_time/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于hexo的yilia模板默认显示的时间只有年月日，但其实我个人会特别在意时分。因为不同时间发出来的东西可能代表着不同的心境。比如深夜发，会不会是遇到伤心事有些失眠？清晨发，可能心情比较好？类似种种。经过一番探究终于找到解决办法。</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_time/image-20200708135440487.png" alt="image-20200708135440487" style="zoom:80%;"></div>

<a id="more"></a>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="初期尝试"><a href="#初期尝试" class="headerlink" title="初期尝试"></a>初期尝试</h2><p>最开始在网上搜寻一番并没有介绍这个的，然后我想着年月日和时分秒肯定是都存在hexo里面的，只不过是yilia模板默认只取了年月日，只要我找到年月日加载到页面是在哪个文件哪个地方进行设置的，应该就有办法把时分秒一起加上去。</p>
<p>在yilia的文件里瞎找一通，最终找到是在如下文件（<code>date.ejs</code>）中进行设置：</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_time/image-20200708140110539.png" alt="image-20200708140110539" style="zoom:80%;"></div>

<p>打开该文件，可以看到是下面一串东西。</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_time/image-20200708140246998.png" alt="image-20200708140246998" style="zoom:80%;"></div>

<p>大致可以猜到是通过<code>date(post.date,date_format)</code>把时间传递到页面上的，我最终确定其实还结合了博客网页的html源码：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_time/image-20200708140635905.png" alt="image-20200708140635905" style="zoom:80%;"></p>
<p>图中圈出来的一串变量和<code>date.ejs</code>里的显然是一样的，然后后面的<code>date(post.date,date_format)</code>消失变成了具体的时间，可以断定<code>date(post.date,date_format)</code>就是显示时间的变量。</p>
<p>接下来的步骤就带点尝试了，试着把括号里的<code>date_format</code>换成<code>time_format</code>，也试着改掉博客配置文件里的时间格式（可以去下图<a href="http://momentjs.com/docs/#/displaying/format/" target="_blank" rel="noopener">网站</a>找格式）。</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_time/image-20200708141048768.png" alt="image-20200708141048768" style="zoom:80%;"></p>
<h2 id="最终设置"><a href="#最终设置" class="headerlink" title="最终设置"></a>最终设置</h2><p>最终敲定的是年月日+时分（date+空格+time）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">date(post.date,date_format)+<span class="string">" "</span>+time(post.time,date_format)</span><br></pre></td></tr></table></figure>
<p>改配置文件里的时间格式好像也是可以的（我试的是<code>LLL</code>格式），因为我中间有出来过一次。这里想吐槽一下就是有时候更改配置，浏览器刷新显示会有延时，然后就时而让人不爽。</p>
<p>效果就是最开始的第一张图了~~</p>
<ul>
<li>补充</li>
</ul>
<p>hexo博客显示的时间是md文件改动的时间，并不是上面写的<code>date: xxxx</code>。</p>
<h1 id="重要订正"><a href="#重要订正" class="headerlink" title="重要订正"></a>重要订正</h1><p><code>date(post.date,post.time,date_format)+&quot; &quot;+time(post.date,post.time,date_format)</code></p>
<p>刚刚写博客的时候还特地试着把date(xxx)里的post.time以及time(xxx)里的post.date删了，然后发现就出现了刷新一下页面，所有博文的时间都显示跟着刷新显示当前的时间，这tm不成了时钟了吗~~</p>
<p>总之，都不要删，就挺好。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>本来想显示更新时间而不是创建时间，但是不知道怎么把updated显示到页面上。</p>
<p>还有就是我忽然觉得没有必要了~~我直接在写完或者更新的时候把date改掉，然后在正文中注明每个时间点不就可以吗？没必要折腾了，累了累了。</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo中post和page的差别</title>
    <url>/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E4%B8%ADpost%E5%92%8Cpage%E7%9A%84%E5%B7%AE%E5%88%AB/</url>
    <content><![CDATA[<p>刚刚学会了新建页面，注意我自己自然而言说的都是“页面”，而不是博文。下面简单说一下<code>页面</code>和<code>文章</code>的区别。</p>
<a id="more"></a>
<p>我所要求的用<code>&lt;!--more--&gt;</code>显示部分内容其实是针对博文的！其实也可以理解，一个页面你只会要求它可以不断下拉，一般不会要求它折叠起来。</p>
<p>对于页面而言，即使在Front-matter添加了标签也是不会生效的。</p>
<blockquote>
<p>Front-matter ：文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p>
</blockquote>
<p>而且<code>页面</code>是不会显示在<code>归档</code>等综合展示博文的地方的。</p>
<p>总之页面和博文是两个东西：官方称博文为page，称页面为post。官方教程内容如下：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E4%B8%ADpost%E5%92%8Cpage%E7%9A%84%E5%B7%AE%E5%88%AB/image-20200708102156713.png" alt="image-20200708102156713"></p>
<ul>
<li>总结：</li>
</ul>
<ol>
<li>博文就是放琐碎的文章；</li>
<li>页面就是放一些不常更改的东西，比如<strong>简历</strong>，<strong>研究进展</strong>。我直接单独开辟一个简历页然后把pdf贴上去感觉也可以。</li>
</ol>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>添加新页面</title>
    <url>/2020/07/08/index/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>除了yilia模板给我们创建的一些页面，还是有必要学会自己定义新的页面，比如相册，学习资料链接等。这一篇博客就是叫大家如何在hexo的yilia模板下新建自定义页面。</p>
<a id="more"></a>
<h1 id="添加新页面"><a href="#添加新页面" class="headerlink" title="添加新页面"></a>添加新页面</h1><p>参考<a href="https://blog.csdn.net/weixin_44539392/article/details/86621999" target="_blank" rel="noopener">博客</a>，用<code>hexo new page album</code>指令，然后就可以看到在source下多了一个<code>album</code>的文件夹，里面有一个<code>index.md</code>文件，如下图：</p>
<p>​    <img src="/2020/07/08/index/image-20200708085021066.png" alt="image-20200708085021066"></p>
<h1 id="配置路径让页面显示"><a href="#配置路径让页面显示" class="headerlink" title="配置路径让页面显示"></a>配置路径让页面显示</h1><p>编辑主题的 <code>_config.yml</code> ，在 <code>menu</code> 中添加如下路径（这和上面参考的博客中说的不一样，但是也能正常显示页面）</p>
<p><img src="/2020/07/08/index/image-20200708085224818.png" alt="image-20200708085224818"></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这样子貌似和写博文没什么区别（就连编辑内容也是用的md而不是自定义html），只不过完全开辟了另一块空间，之前博文都是默认在<code>_posts</code>文件夹下，现在可以放在同级的更多文件夹下，其实就实现了预想的效果。</p>
<div align="center"><img src="/2020/07/08/index/image-20200708085739842.png" alt="image-20200708085739842" style="zoom:100%;"></div>

<p>这就是效果，可以在相册这个md中添加图片，实现相册效果。</p>
<p><img src="/2020/07/08/index/image-20200708085936839.png" alt="image-20200708085936839"></p>
<p>现在就试一试：</p>
<ul>
<li>毕业典礼</li>
</ul>
<p><img src="/2020/07/08/index/CSCL0153.JPG" alt="CSCL0153"></p>

<p>html代码，实测可以正常显示</p>


<p>不用上下两个标签试试。html代码，实测可以正常显示</p>

<p>图片居中的方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image-20200708085739842.png"</span> <span class="attr">alt</span>=<span class="string">"image-20200708085739842"</span> <span class="attr">style</span>=<span class="string">"zoom:100%;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，最原始的插入图片，代码是如下形式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">![<span class="built_in">image</span><span class="number">-20200708091825701</span>](index/<span class="built_in">image</span><span class="number">-20200708091825701.</span>png)</span><br></pre></td></tr></table></figure>
<p>这样子如果直接在两边添加<code>&lt;div align=center&gt;</code>之类的也会被自动翻译成html，最终的效果就是：</p>
<p><img src="/2020/07/08/index/image-20200708092128636.png" alt="image-20200708092128636" style="zoom:100%;"></p>
<p>所以正确的做法就是复制的时候随便选一下缩放，使代码标准的HTML插图格式<img src="/2020/07/08/index/01AFBE1F.gif" alt="img" style="zoom:10%;">，<strong>然后在两边加上居中的div块</strong>。好在typora插图图片是会自动询问缩放，点一下就可以（不要点100%），倒还不是过于复杂。</p>
<ul>
<li>补充：</li>
</ul>
<p>这是刚刚用搜狗输入法插入一张表情图的效果：</p>
<div align="center"><img src="/2020/07/08/index/image-20200708092744823.png" alt="image-20200708092744823" style="zoom:100%;"></div>

<p>发现在网页正常显示了，大吃一惊，回来一看发现并不是常规插图的代码，而是typora自动把搜狗的图用html的方式插入了。</p>
<ul>
<li>总结：</li>
</ul>
<ol>
<li>图片居中也是转换成html用center的div</li>
<li>插动图也是用html形式就很好</li>
<li>用html插图片的方式简直万能啊！！！而且不用像前面那样把index/特地去掉！！总之超级方便！</li>
<li>另外！前面的html是不用<code>  </code>的。再次感叹typora太tm强大了！只要是那种代码指定样式的语言，都所见所得地直接展示出来了。  </li>
</ol>
<ul>
<li>再补充：</li>
</ul>
<p><img src="/2020/07/08/index/image-20200708093743410.png" alt="image-20200708093743410" style="zoom:100%;"></p>
<p>代码块还是ok的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;  &#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><strong>好像我这样自定义的页面没法用<code>&lt;!-- more --&gt;</code>来进行文章折叠。</strong></p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo中插入pdf文件</title>
    <url>/2020/07/08/%E6%95%99%E7%A8%8B/hexo_pdf/</url>
    <content><![CDATA[<p>下载<a href="./test.pdf">链接</a></p>
<a id="more"></a>
<div class="pdfobject-container" data-target="test.pdf" data-height="500px"></div>
<p>页面的pdf路径和文章的pdf路径的写法不同。</p>
<ul>
<li>文章</li>
</ul>
<p>本文即为一篇文章，经试验，下图的路径可以正常显示。也就是说文章中是否添加<code>./</code>都可以正常识别出，但是不可<code>./hexo_pdf/test.pdf</code>，这样子编译生成后的路径会多出一个<code>hexo_pdf</code>导致无法识别到pdf文件。</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_pdf/image-20200708132425004.png" alt="image-20200708132425004" style="zoom:80%;"></div>

<ul>
<li>页面</li>
</ul>
<p>页面的路径必须填写完整，如下图。</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_pdf/image-20200708132815762.png" alt="image-20200708132815762" style="zoom:80%;"></div>

<p>因为hexo本身对待页面和文章就是不同的，在public文件夹下可以看到，post和page本身的编译就是不同的。</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_pdf/image-20200708133055817.png" alt="image-20200708133055817" style="zoom:100%;"></div>

<p>我们前面介绍的针对于图片的插件，其实也可以认为是针对文章的，他会自动生成<code>2020/07/xx</code>样式的前缀，正是因为文章编译后的绝对路径就是这种形式的。如果我们再添加一些前缀，反而和插件所做的工作冲突，导致路径找不到。</p>
<p>而既然插件没有帮我们对页面的路径进行修改，那我们就得写全编译后的绝对路径。这照着下面这张图其实很好写。</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_pdf/image-20200708133725644.png" alt="image-20200708133725644" style="zoom:80%;"></div>

<p>也可以简单测试一下：如果在页面环境下用<code>./CV_Chinese.pdf</code>设置，可以看到路径是下面这个，而<code>CV</code>目录下是没有<code>CV_Chinese.pdf</code>的，只有<code>index</code>下才有，所以报错。</p>
<div align="center"><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo_pdf/image-20200708133526227.png" alt="image-20200708133526227" style="zoom:100%;"></div>

<ul>
<li>总结</li>
</ul>
<ol>
<li>插件针对于文章才生效，所以文章中无论是图片还是pdf等其他附件资源，不能画蛇添足地在路径前面多加东西；</li>
<li>页面中的资源，填写绝对路径；</li>
<li>总之不外乎这里列出的三种情况（绝对路径，./xxx，直接xxx），实在不行三个都尝试一遍。</li>
</ol>
<p><strong>注意</strong>：插入貌似插图插pdf路径里都不能有中文，一有中文就各种<code>%B%Exxx</code>的，然后就出不来，所以可以在文件命名的时候用英文，然后title里用中文。</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客插入图片失败解决方法</title>
    <url>/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>今天晚上花了大概1个小时在晚上搜寻各种hexo博客插入图片无法显示的解决办法，很多方法是重叠的，所以真正不同的解决方法并不多。</p>
<p>尤其让我有些惊讶的是不同的几篇博客，内容根本完全一样，就是纯粹的copy，虽然说明了转载（注明转载的话往往还放在最后一句，这种东西不应该开篇说明最好吗？），但是我觉得直接给出链接不就可以了吗？为何还要完全从头到尾copy一遍？而且多少加上一些自己的理解，稍微修缮一下原博文，这样不断转载的版本也会越来越好。</p>
<p>闲言碎语多扯了一点。本回答受该<a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">博客</a>启发较大。</p>
<a id="more"></a>
<h1 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h1><h2 id="2-1-创建图片资源文件夹"><a href="#2-1-创建图片资源文件夹" class="headerlink" title="2.1 创建图片资源文件夹"></a>2.1 创建图片资源文件夹</h2><p>网上有关的解决方式几乎很大一部分会提到这一点：将<code>_config.yml</code> 文件中的<code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。事实上这正是hexo<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">官方文档</a>给出的解决<strong>方案之一</strong>中的<strong>一个步骤</strong>。仔细阅读后会发现如下几点：</p>
<ol>
<li>该操作的作用就是在使用<code>hexo new xxx</code>指令新建博文时，在相同路径下同步创建一个<code>xxx</code>文件夹，而<code>xxx</code>文件夹的作用就是用来存放图片资源；</li>
<li>就我个人而言，我偏好于直接在<code>source\_posts</code>文件夹下新建md文件，而不是通过<code>hexo new xxx</code>指令；</li>
<li>那么直接新建<code>xxx.md</code>再新建<code>xxx</code>文件夹，这种操作的最终效果和使用<code>hexo new xxx</code>指令新建博文的效果一样吗？经过实测，是一样的。</li>
</ol>
<p>基于以上3点，告诉大家几个结论：</p>
<ol>
<li>新建博文可以不用<code>hexo new xxx</code>指令，我较为推荐直接新建文件和文件夹的方式，只要达到<strong>一个md文件，一个同名文件夹</strong>的效果即可；</li>
<li>【将<code>_config.yml</code> 文件中的<code>post_asset_folder</code> 选项设为 <code>true</code> 】是<strong>必须</strong>的！理论上既然没用<code>hexo new xxx</code>指令，文件夹也是我自己新建的，这一步设置的意义似乎并不存在，但是后文介绍的插件必须在<code>post_asset_folder</code> 选项设为 <code>true</code>的情况下才能生效——<strong>本人亲测，大家记住这么设置即可</strong>！</li>
</ol>
<h2 id="2-2-typora中图像设置"><a href="#2-2-typora中图像设置" class="headerlink" title="2.2 typora中图像设置"></a>2.2 typora中图像设置</h2><p>一般来说，大家会现在typora里写好md格式的博客，然后通过<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>进行一下本地测试，确认无误后再发布到远端。</p>
<p>暂且不说hexo博客的图片插入是个问题，我相信当初单纯利用typora做笔记时，图片文件的管理就让很多人头疼过，typora官方似乎也意识到这个问题，所以<code>偏好设置</code>中<code>图像</code>是专门的一项，提供了很多选择。</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707222506636.png" alt="在这里插入图片描述"></p>
<p>我相信大多数同学写md时的图片很多可能是直接截图或者在其他地方copy的，然后在typora中直接粘贴就ok了。但是这么做之前最好把typora插入图片时采取何种操作配置好，否则md文件和图片相隔十万八千里，后续一旦移动md文件图片就识别不出来，相信大家用过typora都深有体会。</p>
<p>所以接下来讲一下typora如何设置。直接给结论：<br><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707224416296.png" alt="在这里插入图片描述"></p>
<p>框里的路径是：<code>./${filename}</code>。<code>./</code>表示当前文件夹，<code>${filename}</code>表示当前文件名。这么设置的好处：</p>
<ol>
<li>图片资源文件夹有了；</li>
<li>而且是同名文件夹！（2.1中的文件夹其实不用手动添加了）</li>
</ol>
<p>这么设置的结果就是：想写篇博客，在<code>source\_posts</code>文件夹下新建<code>xxx.md</code>文件，写着写着需要插一张图，从别处复制，然后在typora中直接粘贴，<code>bling!</code>图片资源文件夹自动搞定，并不用关心什么文件夹，只管专注于<code>md</code>文件即可。</p>
<h2 id="2-3-插件下载"><a href="#2-3-插件下载" class="headerlink" title="2.3 插件下载"></a>2.3 插件下载</h2><p>这个很多博客也有提到，插件的名字叫<code>hexo-asset-image</code>，相信在网上找了一波解决方案的同学一定对这个名字不陌生。</p>
<p>这个插件的不同版本可能会有不同的影响，我最终成功解决问题的版本是用如下命令下载的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install https:<span class="comment">//github.com/CodeFalling/hexo-asset-image --save</span></span><br></pre></td></tr></table></figure>
<p>为什么需要这么插件呢？</p>
<p>因为我们虽然在<code>source\_posts</code>文件夹下写了md文件，也有了图片资源文件夹存了图片，但从我们前面typora中的设置不难知道，实际上md文件中的图片路径都是相对路径（<code>./${filename}</code>）。而实际网上看到的博文显然不是md文件，而是html文件，从md到html的转变就是hexo帮我们做的，还记得<code>hexo g</code>命令吗？就是干这个的。转换后的html文件在<code>public</code>目录下，路径是通过日期指示的。</p>
<p>下面第一张图是存放md文件的地方，图片就在图中的<code>jiangzhou</code>文件夹中；第二张图是generate之后存在html和图片资源的地方。<br><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707230449117.png" alt="在这里插入图片描述"><br><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707230344687.png" alt="在这里插入图片描述"></p>
<p>大家如果了解过html的话，应该知道里面的图片应该是指定绝对路径的，大家可以打开上面第二张图的<code>index.html</code>，找到插入图片的地方，查看是否是可用的绝对路径，我的如下图。大家如果问题还没解决的话应该不是像我一样的日期+文件夹指明的绝对路径。</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707230945338.png" alt="在这里插入图片描述"></p>
<p>说到这儿，大家应该知道，理论上需要<strong>将md中图片的相对路径转换成html中的绝对路径</strong>，这样图片才能正常显示。因为我们图片资源也有了，显示不出来只能是路径不对（为验证，大家图片显示不对的话，打开index.html，插图片地方的路径肯定是一串不明所以的字母数字）。</p>
<p><strong>路径转换</strong>就是该节最开始提到的插件的作用：根据md图片的相对路径，给出html中图片的绝对路径。</p>
<h2 id="2-4-修改md图片路径"><a href="#2-4-修改md图片路径" class="headerlink" title="2.4 修改md图片路径"></a>2.4 修改md图片路径</h2><p>经过前面typora的设置，大家粘贴图片到typora应该是这种画风：<br><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/2020070723222350.png" alt="在这里插入图片描述"><br><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707232211833.png" alt="在这里插入图片描述"></p>
<p>路径：md文件名/图片名</p>
<p>图片资源文件夹：自动生成且同名。</p>
<p>这时如果用<code>hexo clean</code>、<code>hexo g</code>生成html文件，用Notepad++或其他工具打开index.html（路径见下方第一张图），找到插图片的地方，查看图片路径（见下方第一张图）：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707233408779.png" alt="在这里插入图片描述"></p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707233627620.png" alt="在这里插入图片描述"></p>
<p>发现图片路径似乎多了一串<code>07/07/test</code>！如果用<code>hexo s</code>在本地查看网页，会发现是下面这个样子：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707233802521.png" alt="在这里插入图片描述"></p>
<p>点开那个未加载的图：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707233836795.png" alt="在这里插入图片描述"></p>
<p>继续点<code>The image</code>：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707234315826.png" alt="在这里插入图片描述"></p>
<p>可以发现这里显示的路径和我们在html文件源码中看到的是一致的，既然觉得路径重复，那么我们就把重复的删了试试看：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707234443787.png" alt="在这里插入图片描述"></p>
<p>图片显示出来了！</p>
<p>既然是路径问题，那么是不是插件有问题？或者我们使用方法错了？</p>
<p>找到插件安装位置（插件都在node_modules文件夹下），打开readme文件（怎么是1985年的？！<code>(*/ω＼*)</code>）</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707234721423.png" alt="在这里插入图片描述"></p>
<p>readme如下：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707235038719.png" alt="在这里插入图片描述"></p>
<p>瞬间发现别人的说明书讲得明明白白，言简意赅！我们的转化后路径不对正是因为我们md文件中图片的路径不对，图片名前面不能有其他东西！</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707235339515.png" alt="在这里插入图片描述"></p>
<p>删去<code>test/</code>（这样md中图片就没法正常显示了），重新<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>测试——</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707235556349.png" alt="在这里插入图片描述"></p>
<p>本地网页显示如下：</p>
<p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200707235939737.png" alt="在这里插入图片描述"></p>
<p>发布到远端我这边也没什么问题，至此该问题算是解决了。主要就是编译（我姑且称之为编译，有点那个味道）前需要在md中把图片的路径都删去前面的<code>xxx/</code>，图片一多可能还是有些繁琐，但目前还没有找到更好的替代方法。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2020/07/08/%E6%95%99%E7%A8%8B/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/20200708000313401.png" alt="在这里插入图片描述"></p>
<p>找解决方案找了一个多小时，写这篇博客好像写了2个多小时。感觉应该把整个过程讲得还算比较清楚了。</p>
<p>但是这种问题向来因人而异，同样的解决方法可能可以解决我的问题，但对另一个人无效。还是要多查找资料，多尝试，多思考。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/07/%E6%95%99%E7%A8%8B/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
